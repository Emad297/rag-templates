[project]
name = "graphrag-chatbot"
version = "0.1.0"
description = "GraphRAG Chatbot implementation using SurrealDB and LangChain"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
authors = [
    { name = "GraphRAG Developer", email = "developer@example.com" }
]
keywords = [
    "graphrag",
    "surrealdb", 
    "langchain",
    "chatbot",
    "rag",
    "vector-search",
    "knowledge-graph"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core SurrealDB
    "surrealdb>=0.3.0",
    
    # LangChain core and community packages
    "langchain>=0.1.0",
    "langchain-core>=0.1.0", 
    "langchain-community>=0.0.10",
    "langchain-experimental>=0.0.50",
    
    # OpenAI integration (optional)
    "langchain-openai>=0.0.5",
    "openai>=1.0.0",
    
    # Ollama for local LLMs
    "ollama>=0.1.0",
    
    # Vector embeddings and ML
    "sentence-transformers>=2.2.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    
    # Data processing
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "click>=8.0.0",
    
    # Async support
    "asyncio-mqtt>=0.11.0",
    "aiofiles>=23.0.0",
    
    # Optional: Additional ML and data science tools
    "pandas>=1.5.0",
    "transformers>=4.20.0",
    "torch>=2.0.0; sys_platform != 'darwin'",
    "torch>=2.0.0; sys_platform == 'darwin' and platform_machine != 'arm64'", 
    "torch>=2.0.0; sys_platform == 'darwin' and platform_machine == 'arm64'",
    
    # Development and debugging
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Documentation dependencies  
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]

# Enhanced ML features
ml = [
    "scikit-learn>=1.3.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]

# Production deployment
prod = [
    "uvicorn>=0.23.0",
    "fastapi>=0.100.0",
    "gunicorn>=21.0.0",
]

[project.urls]
"Homepage" = "https://github.com/your-username/graphrag-chatbot"
"Bug Reports" = "https://github.com/your-username/graphrag-chatbot/issues"
"Source" = "https://github.com/your-username/graphrag-chatbot"
"Documentation" = "https://graphrag-chatbot.readthedocs.io/"

[project.scripts]
graphrag-chatbot = "graphrag_chatbot:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# UV-specific configuration
[tool.uv.sources]
# Use specific index for some packages if needed
# surrealdb = { index = "https://pypi.org/simple" }

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["graphrag_chatbot"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "surrealdb.*",
    "langchain.*",
    "langchain_community.*",
    "langchain_experimental.*",
    "langchain_openai.*",
    "ollama.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "-v",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["graphrag_chatbot"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]